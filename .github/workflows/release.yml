name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Fetch all history for changelog
    
    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: |
        npm run test:comprehensive
        npm run test:jest
    
    - name: Create production build
      run: |
        mkdir -p release
        cp -r src/ release/
        cp -r public/ release/
        cp -r deployment/ release/
        cp package.json release/
        cp package-lock.json release/
        cp README.md release/
        cp DEPLOYMENT.md release/
        cp DEBIAN_INSTALL.md release/
    
    - name: Install production dependencies
      run: |
        cd release
        npm ci --production
    
    - name: Create release archive
      run: |
        tar -czf webchess-${{ github.ref_name }}.tar.gz -C release .
        zip -r webchess-${{ github.ref_name }}.zip release/
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ -n "$(git tag --list --sort=-v:refname | head -2 | tail -1)" ]; then
          PREVIOUS_TAG=$(git tag --list --sort=-v:refname | head -2 | tail -1)
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ github.ref_name }} >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "First release of WebChess!" >> CHANGELOG.md
        fi
        
        echo "## Features" >> CHANGELOG.md
        echo "- Real-time multiplayer chess gameplay" >> CHANGELOG.md
        echo "- Practice mode with AI opponents" >> CHANGELOG.md
        echo "- Comprehensive test suite" >> CHANGELOG.md
        echo "- Mobile-responsive design" >> CHANGELOG.md
        echo "- Chat functionality" >> CHANGELOG.md
        echo "- Session persistence" >> CHANGELOG.md
        
        echo "## Installation" >> CHANGELOG.md
        echo "See DEPLOYMENT.md and DEBIAN_INSTALL.md for installation instructions." >> CHANGELOG.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: CHANGELOG.md
        files: |
          webchess-${{ github.ref_name }}.tar.gz
          webchess-${{ github.ref_name }}.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Deploy to production
      if: "!contains(github.ref_name, 'beta') && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'rc')"
      run: |
        echo "ðŸš€ Deploying release ${{ github.ref_name }} to production"
        # Add production deployment commands here
        # This could be:
        # - SSH deployment
        # - Docker registry push
        # - Cloud deployment (AWS, GCP, Azure)
        # - Container orchestration (Kubernetes)
    
    - name: Notify deployment
      if: success()
      run: |
        echo "âœ… Release ${{ github.ref_name }} deployed successfully"
        # Add notification logic here (Slack, Discord, email, etc.)

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max