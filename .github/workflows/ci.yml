name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run comprehensive tests
      run: npm run test:comprehensive
    
    - name: Run Jest tests
      run: npm run test:jest
    
    - name: Generate test coverage
      run: npm run test:jest -- --coverage
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install ESLint
      run: npm install --save-dev eslint
    
    - name: Run ESLint
      run: npx eslint src/ --ext .js --format github
      continue-on-error: true
    
    - name: Check for security vulnerabilities
      run: npm audit --audit-level high
      continue-on-error: true

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create production build
      run: |
        mkdir -p build
        cp -r src/ build/
        cp -r public/ build/
        cp package.json build/
        cp package-lock.json build/
    
    - name: Install production dependencies
      run: |
        cd build
        npm ci --production
    
    - name: Create deployment package
      run: |
        tar -czf webchess-${{ github.sha }}.tar.gz -C build .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webchess-build-${{ github.sha }}
        path: webchess-${{ github.sha }}.tar.gz
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: webchess-build-${{ github.sha }}
    
    - name: Deploy to staging server
      run: |
        echo "ðŸš€ Deploying to staging environment"
        echo "Build artifact: webchess-${{ github.sha }}.tar.gz"
        echo "This would deploy to staging server via SSH/Docker/etc."
        # Add actual deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: webchess-build-${{ github.sha }}
    
    - name: Deploy to production server
      run: |
        echo "ðŸš€ Deploying to production environment"
        echo "Build artifact: webchess-${{ github.sha }}.tar.gz"
        echo "This would deploy to production server via SSH/Docker/etc."
        # Add actual deployment commands here
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  browser-tests:
    name: Browser Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: |
        npm install --save-dev @playwright/test
        npx playwright install
    
    - name: Start WebChess server
      run: |
        npm start &
        echo $! > server.pid
        sleep 5
    
    - name: Wait for server to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'
    
    - name: Run browser tests
      run: |
        echo "Running browser integration tests..."
        curl -f http://localhost:3000 || exit 1
        echo "âœ… Server is responding"
    
    - name: Stop server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'